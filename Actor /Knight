import greenfoot.*;

public class Knight extends Actor {
    // === PROPERTI FISIKA & GERAKAN ===
    private int vSpeed = 0;
    private final int GRAVITY = 1;
    private final int JUMP_STRENGTH = -15;
    private final int MOVE_SPEED = 4; // Kecepatan dikurangi agar lebih terkontrol
    private final int TERMINAL_VELOCITY = 12;

    // === PROPERTI STATE & AKSI ===
    private boolean isAttacking = false;
    private int attackCooldown = 0;
    private String direction = "right"; // Arah hadap: "right" atau "left"
    private boolean isInvincible = false;
    private int invincibleTimer = 0;

    // === PROPERTI ANIMASI ===
    private GreenfootImage[] idleFrames;
    private GreenfootImage[] walkFrames;
    private GreenfootImage[] attackFrames;
    private GreenfootImage[] jumpFrames;
    private int idleFrameIndex = 0;
    private int walkFrameIndex = 0;
    private int attackFrameIndex = 0;
    private int jumpFrameIndex = 0;
    private int animationTimer = 0;
    private final int ANIMATION_SPEED = 8;
    
    // === PROPERTI SUARA ===
    private GreenfootSound runSound = new GreenfootSound("run.wav");
    private boolean isRunSoundPlaying = false;

    public Knight() {
        loadIdleAnimation();
        loadWalkAnimation();
        loadAttackAnimation();
        loadJumpAnimation();
        setImage(idleFrames[0]);
    }

    public void act() {
        handleTimers();
        handleActions();
        moveAndCollide();
        handleEnemyCollision();
        animate();
    }
    
    /**
     * Mengurus semua timer di dalam game (cooldown, kebal, dll).
     */
    private void handleTimers() {
        if (attackCooldown > 0) attackCooldown--;

        if (isInvincible) {
            invincibleTimer--;
            // Efek berkedip
            if (invincibleTimer % 10 < 5) getImage().setTransparency(100);
            else getImage().setTransparency(255);
            
            if (invincibleTimer <= 0) {
                isInvincible = false;
                getImage().setTransparency(255);
            }
        }
    }

    /**
     * Mengurus semua gerakan (Horizontal & Vertikal) dan tabrakannya.
     * Ini adalah mesin fisika utama karakter.
     */
    private void moveAndCollide() {
        // --- GERAKAN HORIZONTAL ---
        int dx = 0;
        if (!isAttacking) {
            if (Greenfoot.isKeyDown("d") || Greenfoot.isKeyDown("right")) {
                dx = MOVE_SPEED;
                direction = "right";
            }
            if (Greenfoot.isKeyDown("a") || Greenfoot.isKeyDown("left")) {
                dx = -MOVE_SPEED;
                direction = "left";
            }
        }
        
        // Logika Suara Berjalan
        if (dx != 0 && onGround()) {
            if (!isRunSoundPlaying) {
                runSound.playLoop();
                isRunSoundPlaying = true;
            }
        } else {
            if (isRunSoundPlaying) {
                runSound.stop();
                isRunSoundPlaying = false;
            }
        }
        
        setLocation(getX() + dx, getY());
        // Cek tabrakan dinding setelah bergerak horizontal
        while (getOneIntersectingObject(Platform.class) != null) {
            setLocation(getX() - Integer.signum(dx), getY());
        }

        // --- GERAKAN VERTIKAL ---
        vSpeed += GRAVITY;
        if (vSpeed > TERMINAL_VELOCITY) vSpeed = TERMINAL_VELOCITY;
        setLocation(getX(), getY() + vSpeed);
        // Cek tabrakan lantai/atap setelah bergerak vertikal
        while (getOneIntersectingObject(Platform.class) != null) {
            if (vSpeed >= 0) { // Jatuh mengenai lantai
                setLocation(getX(), getY() - 1);
            } else { // Melompat mengenai atap
                setLocation(getX(), getY() + 1);
            }
            vSpeed = 0;
        }
    }

    /**
     * Mengurus input untuk aksi seperti lompat dan menyerang.
     */
    private void handleActions() {
        if (!isAttacking && (Greenfoot.isKeyDown("space") || Greenfoot.isKeyDown("w")) && onGround()) {
            vSpeed = JUMP_STRENGTH;
            Greenfoot.playSound("jump.wav");
        }
        if (Greenfoot.isKeyDown("q") && attackCooldown == 0) {
            attack();
        }
    }
    
    /**
     * Memulai sequence serangan.
     */
    private void attack() {
        isAttacking = true;
        attackCooldown = 40;
        attackFrameIndex = 0;
        Greenfoot.playSound("knive.wav"); // Sesuai permintaan Anda
        // Hentikan suara lari saat menyerang
        if (isRunSoundPlaying) {
            runSound.stop();
            isRunSoundPlaying = false;
        }
    }
    
    /**
     * Mengurus semua jenis tabrakan dengan musuh.
     */
    private void handleEnemyCollision() {
        if (isInvincible) return;

        Musuh enemy = (Musuh) getOneIntersectingObject(Musuh.class);
        if (enemy != null) {
            if (vSpeed > 0 && getY() < enemy.getY() - 30) {
                getWorld().removeObject(enemy);
                if (getWorld() instanceof GameWorld) ((GameWorld) getWorld()).addScore(10);
                vSpeed = -8;
            } 
            else {
                isInvincible = true;
                invincibleTimer = 120;
                if (getWorld() instanceof GameWorld) ((GameWorld) getWorld()).playerDied();
            }
        }
    }
    
    /**
     * Mengecek apakah karakter berdiri di atas tanah.
     */
    public boolean onGround() {
        setLocation(getX(), getY() + 1);
        boolean isTouching = getOneIntersectingObject(Platform.class) != null;
        setLocation(getX(), getY() - 1);
        return isTouching;
    }
    
    /**
     * Menghentikan semua suara looping. Dipanggil oleh Portal.
     */
    public void stopAllSounds() {
        if (isRunSoundPlaying) {
            runSound.stop();
            isRunSoundPlaying = false;
        }
    }

    /**
     * Memilih dan menampilkan animasi yang sesuai.
     */
    private void animate() {
        if (animationTimer > 0) {
            animationTimer--;
            return;
        }
        animationTimer = ANIMATION_SPEED;

        GreenfootImage frameToDisplay;

        if (isAttacking) {
            attackFrameIndex++;
            if (attackFrameIndex >= attackFrames.length) {
                isAttacking = false;
                attackFrameIndex = 0;
                frameToDisplay = idleFrames[idleFrameIndex];
            } else {
                frameToDisplay = attackFrames[attackFrameIndex];
                if (attackFrameIndex == 3) checkAttackHit();
            }
        } else if (!onGround()) {
            jumpFrameIndex = (jumpFrameIndex + 1) % jumpFrames.length;
            frameToDisplay = jumpFrames[jumpFrameIndex];
        } else if (Greenfoot.isKeyDown("d") || Greenfoot.isKeyDown("right") || Greenfoot.isKeyDown("a") || Greenfoot.isKeyDown("left")) {
            walkFrameIndex = (walkFrameIndex + 1) % walkFrames.length;
            frameToDisplay = walkFrames[walkFrameIndex];
        } else {
            idleFrameIndex = (idleFrameIndex + 1) % idleFrames.length;
            frameToDisplay = idleFrames[idleFrameIndex];
        }

        // Terapkan gambar dan cerminkan jika perlu
        if (direction.equals("left")) {
            GreenfootImage mirroredImage = new GreenfootImage(frameToDisplay);
            mirroredImage.mirrorHorizontally();
            setImage(mirroredImage);
        } else {
            setImage(frameToDisplay);
        }
    }
    
    /**
     * Cek apakah serangan mengenai musuh.
     */
    private void checkAttackHit() {
        int checkDistance = 40;
        if (direction.equals("left")) {
            checkDistance = -checkDistance;
        }
        Musuh enemy = (Musuh) getOneObjectAtOffset(checkDistance, 0, Musuh.class);
        if (enemy != null) {
            getWorld().removeObject(enemy);
            if (getWorld() instanceof GameWorld) {
                ((GameWorld) getWorld()).addScore(15);
            }
        }
    }
    
    // === BAGIAN LOAD ANIMASI ===
    private void loadIdleAnimation() {
        idleFrames = new GreenfootImage[4];
        int frameWidth = 100;
        int frameHeight = 64;
        GreenfootImage spritesheet = new GreenfootImage("Idle_KG_2.png");
        for (int i = 0; i < idleFrames.length; i++) {
            idleFrames[i] = new GreenfootImage(frameWidth, frameHeight);
            idleFrames[i].drawImage(spritesheet, -i * frameWidth, 0);
        }
    }
    private void loadWalkAnimation() {
        walkFrames = new GreenfootImage[7];
        int frameWidth = 100;
        int frameHeight = 64;
        GreenfootImage spritesheet = new GreenfootImage("Walking_KG_2.png");
        for (int i = 0; i < walkFrames.length; i++) {
            walkFrames[i] = new GreenfootImage(frameWidth, frameHeight);
            walkFrames[i].drawImage(spritesheet, -i * frameWidth, 0);
        }
    }
    private void loadJumpAnimation() {
        jumpFrames = new GreenfootImage[6];
        int frameWidth = 100;
        int frameHeight = 64;
        GreenfootImage spritesheet = new GreenfootImage("Jump_KG_2.png");
        for (int i = 0; i < jumpFrames.length; i++) {
            jumpFrames[i] = new GreenfootImage(frameWidth, frameHeight);
            jumpFrames[i].drawImage(spritesheet, -i * frameWidth, 0);
        }
    }
    private void loadAttackAnimation() {
        attackFrames = new GreenfootImage[6];
        int frameWidth = 100;
        int frameHeight = 64;
        GreenfootImage spritesheet = new GreenfootImage("Attack_KG_1.png");
        for (int i = 0; i < attackFrames.length; i++) {
            attackFrames[i] = new GreenfootImage(frameWidth, frameHeight);
            attackFrames[i].drawImage(spritesheet, -i * frameWidth, 0);
        }
    }
}
