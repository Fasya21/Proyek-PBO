import greenfoot.*;

public class Knight extends Actor {
    // Properti Gerakan & Fisika
    private int vSpeed = 0;
    private final int GRAVITY = 1;
    private final int JUMP_STRENGTH = -15;
    private final int MOVE_SPEED = 5; // Kecepatan bergerak horizontal
    private final int FEET_Y_OFFSET = 28; // Diatur untuk deteksi kaki yang lebih akurat

    // Properti Animasi
    private GreenfootImage[] idleFrames;
    private GreenfootImage[] walkFrames;
    private GreenfootImage[] attackFrames;
    private GreenfootImage[] jumpFrames;

    private int idleFrameIndex = 0;
    private int walkFrameIndex = 0;
    private int attackFrameIndex = 0;
    private int jumpFrameIndex = 0;

    private int animationTimer = 0;
    private final int ANIMATION_SPEED = 8; // Kecepatan animasi

    private boolean isAttacking = false;
    private int attackCooldown = 0; // Cooldown untuk serangan
    private String direction = "right"; // Arah hadap karakter

    // Properti Suara
    private GreenfootSound runSound = new GreenfootSound("run.wav");
    private boolean isRunSoundPlaying = false; // Untuk mengelola putar/henti suara lari

    public Knight() {
        // Panggil semua metode untuk memuat aset animasi
        loadIdleAnimation();
        loadWalkAnimation();
        loadAttackAnimation();
        loadJumpAnimation();
        setImage(idleFrames[0]); // Atur gambar awal
    }

    public void act() {
        // Kurangi cooldown serangan setiap act cycle
        if (attackCooldown > 0) {
            attackCooldown--;
        }

        handleInput(); // Tangani semua input dari pemain (gerakan dan lompat, termasuk kolisi horizontal)
        applyGravity(); // Terapkan gravitasi pada Knight
        resolveVerticalCollisions(); // Cek dan koreksi tabrakan vertikal dengan platform (atas dan bawah)

        handleEnemyCollision(); // Cek tabrakan dengan musuh
        animate(); // Update animasi Knight
    }

    /**
     * Menghentikan semua suara looping yang sedang dimainkan oleh Knight.
     * Metode ini harus dipanggil sebelum berpindah ke World/Stage baru
     * untuk mencegah suara terus berulang di latar belakang.
     */
    public void stopAllSounds() {
        if (runSound != null && isRunSoundPlaying) {
            runSound.stop();
            isRunSoundPlaying = false;
            // System.out.println("DEBUG: Knight.stopAllSounds() Dipanggil, Suara Lari Dihentikan."); // Aktifkan untuk debugging
        }
        // Tambahkan logika untuk menghentikan suara looping lain jika ada di sini.
    }

    // === BAGIAN GERAKAN DAN INPUT ===
    private void handleInput() {
        // Jika sedang menyerang, Knight tidak bisa bergerak atau melompat
        if (!isAttacking) {
            boolean movingHorizontallyThisFrame = false;
            int nextX = getX();

            if (Greenfoot.isKeyDown("d") || Greenfoot.isKeyDown("right")) {
                nextX += MOVE_SPEED;
                direction = "right";
                movingHorizontallyThisFrame = true;
            } else if (Greenfoot.isKeyDown("a") || Greenfoot.isKeyDown("left")) {
                nextX -= MOVE_SPEED;
                direction = "left";
                movingHorizontallyThisFrame = true;
            }

            // Menerapkan gerakan horizontal dan memeriksa kolisi dinding secara langsung
            if (movingHorizontallyThisFrame) {
                // Mainkan suara lari jika belum dimainkan
                if (!isRunSoundPlaying) {
                    runSound.playLoop();
                    isRunSoundPlaying = true;
                }

                setLocation(nextX, getY());

                // Periksa apakah ada kolisi dinding di posisi baru ini
                Actor wall = checkWallCollision();
                if (wall != null) {
                    if (direction.equals("right")) {
                        int wallLeftEdge = wall.getX() - (wall.getImage().getWidth() / 2);
                        setLocation(wallLeftEdge - (getImage().getWidth() / 2), getY());
                    } else if (direction.equals("left")) {
                        int wallRightEdge = wall.getX() + (wall.getImage().getWidth() / 2);
                        setLocation(wallRightEdge + (getImage().getWidth() / 2), getY());
                    }
                }
            } else {
                // Hentikan suara lari jika tidak bergerak secara horizontal
                if (isRunSoundPlaying) {
                    runSound.stop();
                    isRunSoundPlaying = false;
                }
                walkFrameIndex = 0;
            }

            // Hanya bisa melompat jika di tanah
            if ((Greenfoot.isKeyDown("space") || Greenfoot.isKeyDown("w")) && onGround() && vSpeed >= 0) {
                vSpeed = JUMP_STRENGTH;
                Greenfoot.playSound("jump.wav");
                // Hentikan suara lari saat melompat
                if (isRunSoundPlaying) {
                    runSound.stop();
                    isRunSoundPlaying = false;
                }
            }
        }

        // Serangan bisa dilakukan kapan saja, asalkan tidak dalam cooldown
        if (Greenfoot.isKeyDown("q") && attackCooldown == 0) {
            attack();
        }
    }

    // --- METODE MENERAPKAN GRAVITASI ---
    private void applyGravity() {
        vSpeed += GRAVITY;
        if (vSpeed > 10) {
            vSpeed = 10;
        }
        setLocation(getX(), getY() + vSpeed);
    }

    // --- METODE RESOLUSI TABRAKAN VERTIKAL ---
    private void resolveVerticalCollisions() {
        Actor platformLanding = getOneObjectAtOffset(0, FEET_Y_OFFSET, Platform.class);

        if (platformLanding != null && vSpeed > 0) {
            vSpeed = 0;
            int platformTop = platformLanding.getY() - platformLanding.getImage().getHeight() / 2;
            setLocation(getX(), platformTop - FEET_Y_OFFSET);
            jumpFrameIndex = 0;

            if (!isAttacking && (Greenfoot.isKeyDown("d") || Greenfoot.isKeyDown("right") || Greenfoot.isKeyDown("a") || Greenfoot.isKeyDown("left"))) {
                if (!isRunSoundPlaying) {
                    runSound.playLoop();
                    isRunSoundPlaying = true;
                }
            }
        }

        Actor platformHittingHead = getOneObjectAtOffset(0, -getImage().getHeight() / 2, Platform.class);
        if (platformHittingHead != null && vSpeed < 0) {
            vSpeed = 0;
            int platformBottom = platformHittingHead.getY() + (platformHittingHead.getImage().getHeight() / 2);
            setLocation(getX(), platformBottom + (getImage().getHeight() / 2));
        }
    }

    // --- METODE DETEKSI TABRAKAN DINDING HORIZONTAL ---
    private Actor checkWallCollision() {
        int horizontalCheckOffset = (getImage().getWidth() / 2) - 2;
        Actor wall = null;
        if (direction.equals("right")) {
            wall = getOneObjectAtOffset(horizontalCheckOffset, 0, Platform.class);
        } else if (direction.equals("left")) {
            wall = getOneObjectAtOffset(-horizontalCheckOffset, 0, Platform.class);
        }
        return wall;
    }

    private void attack() {
        isAttacking = true;
        attackCooldown = 30;
        attackFrameIndex = 0;
        Greenfoot.playSound("knife.wav");
        if (isRunSoundPlaying) { // Hentikan suara lari saat menyerang
            runSound.stop();
            isRunSoundPlaying = false;
        }
    }

    // --- METODE ON GROUND (CEK APAKAH KARAKTER DI ATAS TANAH) ---
    public boolean onGround() {
        Actor platform = getOneObjectAtOffset(0, FEET_Y_OFFSET + 1, Platform.class);
        return platform != null;
    }

    private void checkAttackHit() {
        int checkDistance = 40;
        if (direction.equals("left")) {
            checkDistance = -checkDistance;
        }

        Musuh enemy = (Musuh) getOneObjectAtOffset(checkDistance, 0, Musuh.class);
        if (enemy != null) {
            // Ini akan memanggil addScore di stage saat ini.
            // Pastikan metode addScore ada di semua kelas Stage Anda.
            // Atau buat BaseStage yang mewarisi semua stage jika ingin lebih rapi.
            if (getWorld() instanceof Stage1_Desa) { ((Stage1_Desa) getWorld()).addScore(15); }
            else if (getWorld() instanceof Stage2_Arena) { ((Stage2_Arena) getWorld()).addScore(15); }
            else if (getWorld() instanceof Stage3_Perbatasan) { ((Stage3_Perbatasan) getWorld()).addScore(15); }
            getWorld().removeObject(enemy);
        }
    }

    // === BAGIAN INTERAKSI DENGAN MUSUH ===
    private void handleEnemyCollision() {
        Musuh enemy = (Musuh) getOneObjectAtOffset(0, 0, Musuh.class);
        if (enemy != null) {
            if (vSpeed > 0 && getY() < enemy.getY() - (enemy.getImage().getHeight() / 2) + 10) {
                if (getWorld() instanceof Stage1_Desa) { ((Stage1_Desa) getWorld()).addScore(10); }
                else if (getWorld() instanceof Stage2_Arena) { ((Stage2_Arena) getWorld()).addScore(10); }
                else if (getWorld() instanceof Stage3_Perbatasan) { ((Stage3_Perbatasan) getWorld()).addScore(10); }

                getWorld().removeObject(enemy);
                vSpeed = -8;
            } else {
                getWorld().showText("Anda Kalah!", getWorld().getWidth()/2, getWorld().getHeight()/2);
                Greenfoot.delay(60);

                if (isRunSoundPlaying) { // Pastikan suara lari dihentikan jika game over
                    runSound.stop();
                    isRunSoundPlaying = false;
                }

                if (getWorld() instanceof Stage1_Desa) { Greenfoot.setWorld(new Stage1_Desa()); }
                else if (getWorld() instanceof Stage2_Arena) { Greenfoot.setWorld(new Stage2_Arena()); }
                else if (getWorld() instanceof Stage3_Perbatasan) { Greenfoot.setWorld(new Stage3_Perbatasan()); }
            }
        }
    }

    // === BAGIAN ANIMASI ===
    private void animate() {
        animationTimer++;
        if (animationTimer < ANIMATION_SPEED) return;
        animationTimer = 0;

        GreenfootImage currentFrame = null;

        if (isAttacking) {
            attackFrameIndex++;
            if (attackFrameIndex >= attackFrames.length) {
                isAttacking = false;
                attackFrameIndex = 0;
            } else {
                currentFrame = attackFrames[attackFrameIndex];
                if (attackFrameIndex == 3) {
                    checkAttackHit();
                }
            }
        } else if (!onGround()) {
            if (vSpeed < 0) {
                currentFrame = jumpFrames[0];
            } else {
                currentFrame = jumpFrames[jumpFrames.length - 1];
            }
        } else if (Greenfoot.isKeyDown("d") || Greenfoot.isKeyDown("right") || Greenfoot.isKeyDown("a") || Greenfoot.isKeyDown("left")) {
            walkFrameIndex = (walkFrameIndex + 1) % walkFrames.length;
            currentFrame = walkFrames[walkFrameIndex];
        } else {
            idleFrameIndex = (idleFrameIndex + 1) % idleFrames.length;
            currentFrame = idleFrames[idleFrameIndex];
        }

        if (currentFrame != null) {
            if (direction.equals("left") && !isAttacking) { // Jangan cerminkan animasi serangan
                GreenfootImage mirroredImage = new GreenfootImage(currentFrame);
                mirroredImage.mirrorHorizontally();
                setImage(mirroredImage);
            } else {
                setImage(currentFrame);
            }
        }
    }

    // === BAGIAN LOAD ANIMASI ===
    private void loadIdleAnimation() {
        idleFrames = new GreenfootImage[4];
        int frameWidth = 100;
        int frameHeight = 64;
        GreenfootImage spritesheet = new GreenfootImage("Idle_KG_2.png");
        for (int i = 0; i < idleFrames.length; i++) {
            idleFrames[i] = new GreenfootImage(frameWidth, frameHeight);
            idleFrames[i].drawImage(spritesheet, -i * frameWidth, 0);
        }
    }

    private void loadWalkAnimation() {
        int frameCount = 7;
        walkFrames= new GreenfootImage[frameCount];
        int frameWidth = 100;
        int frameHeight = 64;
        GreenfootImage spritesheet = new GreenfootImage("Walking_KG_2.png");
        for (int i = 0; i < walkFrames.length; i++) {
            walkFrames[i] = new GreenfootImage(frameWidth, frameHeight);
            walkFrames[i].drawImage(spritesheet, -i * frameWidth, 0);
        }
    }

    private void loadJumpAnimation() {
        int frameCount = 6;
        jumpFrames = new GreenfootImage[frameCount];
        int frameWidth = 100;
        int frameHeight = 64;
        GreenfootImage spritesheet = new GreenfootImage("Jump_KG_2.png");
        for (int i = 0; i < jumpFrames.length; i++) {
            jumpFrames[i] = new GreenfootImage(frameWidth, frameHeight);
            jumpFrames[i].drawImage(spritesheet, -i * frameWidth, 0);
        }
    }

    private void loadAttackAnimation() {
        int frameCount = 6;
        attackFrames = new GreenfootImage[frameCount];
        int frameWidth = 100;
        int frameHeight = 64;
        GreenfootImage spritesheet = new GreenfootImage("Attack_KG_1.png");
        for (int i = 0; i < attackFrames.length; i++) {
            attackFrames[i] = new GreenfootImage(frameWidth, frameHeight);
            attackFrames[i].drawImage(spritesheet, -i * frameWidth, 0);
        }
    }
}
