import greenfoot.*;

public class Knight extends Actor {
    // Properti Gerakan & Fisika
    private int vSpeed = 0;
    private final int GRAVITY = 1;
    private final int JUMP_STRENGTH = -15;
    private final int MOVE_SPEED = 5;

    // Properti Animasi
    private GreenfootImage[] idleFrames;
    private GreenfootImage[] walkFrames;
    private GreenfootImage[] attackFrames;
    private GreenfootImage[] jumpFrames;
    
    private int idleFrameIndex = 0;
    private int walkFrameIndex = 0;
    private int attackFrameIndex = 0;
    private int jumpFrameIndex = 0;
    
    private int animationTimer = 0;
    private final int ANIMATION_SPEED = 8;
    
    private boolean isAttacking = false;
    private int attackCooldown= 0;
    private String direction = "right";
    
    public Knight() {
        // Panggil semua metode untuk memuat aset animasi
        loadIdleAnimation();
        loadWalkAnimation();
        loadAttackAnimation();
        loadJumpAnimation();
        setImage(idleFrames[0]);
    }

    public void act() {
        if(attackCooldown > 0) {
            attackCooldown--;
        }

        handleKeys();
        
        if (!isAttacking) {
            applyGravity();
            checkPlatformCollision();
        }
        
        handleEnemyCollision();
        animate();
    }

    // === BAGIAN GERAKAN ===
    private void handleKeys() {
        if (!isAttacking) {
            if (Greenfoot.isKeyDown("d") || Greenfoot.isKeyDown("right")) {
                setLocation(getX() + MOVE_SPEED, getY());
                direction = "right"; // Set arah hadap
            }
            if (Greenfoot.isKeyDown("a") || Greenfoot.isKeyDown("left")) {
                setLocation(getX() - MOVE_SPEED, getY());
                direction = "left"; // Set arah hadap
            }
            if ((Greenfoot.isKeyDown("space") || Greenfoot.isKeyDown("w")) && onGround()) {
                vSpeed = JUMP_STRENGTH;
            }
        }
        if (Greenfoot.isKeyDown("q") && attackCooldown == 0) {
            attack();
        }
    }

    private void applyGravity() {
        setLocation(getX(), getY() + vSpeed);
        vSpeed += GRAVITY;
    }

    // Di kelas Knight
    private void checkPlatformCollision() {
        // Deteksi 5px di bawah kaki karakter
        int detectionOffset = getImage().getHeight() / 2 + 5;
        Actor platform = getOneObjectAtOffset(0, detectionOffset, Platform.class);
        
        if (platform != null && vSpeed > 0) {
            int platformTop = platform.getY() - platform.getImage().getHeight() / 2;
            int charBottom = getY() + getImage().getHeight() / 2;
            
            if (charBottom > platformTop) {
                vSpeed = 0;
                // Koreksi posisi karakter
                setLocation(getX(), getY() - (charBottom - platformTop));
            }
        }
    }

    public boolean onGround() {
        // Deteksi 6px di bawah kaki karakter (sedikit lebih dalam)
        int detectionOffset = getImage().getHeight() / 2 + 6;
        return getOneObjectAtOffset(0, detectionOffset, Platform.class) != null;
    }
    
    private void attack() {
        isAttacking = true;
        attackCooldown = 30; // Jeda sebelum bisa menyerang lagi
        attackFrameIndex = 0; // Mulai animasi serangan dari frame pertama
    }
    
    private void checkAttackHit() {
        // Cek apakah ada musuh dalam jangkauan serangan
        int checkDistance = 40; // Jarak jangkauan serangan
        if (direction.equals("left")) {
            checkDistance = -checkDistance; // Arah ke kiri
        }

        Musuh enemy = (Musuh) getOneObjectAtOffset(checkDistance, 0, Musuh.class);
        if (enemy != null) {
            // Beri skor
            if (getWorld() instanceof Stage1_Desa) { ((Stage1_Desa) getWorld()).addScore(15); } 
            else if (getWorld() instanceof Stage2_Arena) { ((Stage2_Arena) getWorld()).addScore(15); }
            else if (getWorld() instanceof Stage3_Perbatasan) { ((Stage3_Perbatasan) getWorld()).addScore(15); }
            
            // Hapus musuh
            getWorld().removeObject(enemy);
        }
    }
    // === BAGIAN INTERAKSI ===
    private void handleEnemyCollision() {
        Musuh enemy = (Musuh) getOneObjectAtOffset(0, 0, Musuh.class);
        if (enemy != null) {
            if (vSpeed > 0 && getY() < enemy.getY() - 30) {
                if (getWorld() instanceof Stage1_Desa) { ((Stage1_Desa) getWorld()).addScore(10); } 
                else if (getWorld() instanceof Stage2_Arena) { ((Stage2_Arena) getWorld()).addScore(10); }
                else if (getWorld() instanceof Stage3_Perbatasan) { ((Stage3_Perbatasan) getWorld()).addScore(10); }
                getWorld().removeObject(enemy);
                vSpeed = -8;
            } else {
                getWorld().showText("Anda Kalah!", getWorld().getWidth()/2, getWorld().getHeight()/2);
                Greenfoot.delay(60);
                if (getWorld() instanceof Stage1_Desa) { Greenfoot.setWorld(new Stage1_Desa()); } 
                else if (getWorld() instanceof Stage2_Arena) { Greenfoot.setWorld(new Stage2_Arena()); }
                else if (getWorld() instanceof Stage3_Perbatasan) { Greenfoot.setWorld(new Stage3_Perbatasan()); }
            }
        }
    }

    // === BAGIAN ANIMASI (KODE LENGKAP) ===
    private void animate() {
        animationTimer++;
        if (animationTimer < ANIMATION_SPEED) return;
        animationTimer = 0;
        
        // Logika animasi baru yang lebih kompleks
        if (isAttacking) {
            attackFrameIndex++;
            if (attackFrameIndex >= attackFrames.length) {
                isAttacking = false; 
                attackFrameIndex = 0;
                setImage(idleFrames[0]); // Kembali ke idle setelah menyerang
            } else {
                GreenfootImage currentFrameGambar = attackFrames[attackFrameIndex];
                if (direction.equals("left")) {
                GreenfootImage gambarKiri = new GreenfootImage(currentFrameGambar);
                gambarKiri.mirrorHorizontally();
                setImage(gambarKiri); 
                } else {
                    setImage(currentFrameGambar);
                }
                if(attackFrameIndex == 3) { 
                    checkAttackHit(); 
                }
            }
        } else if (!onGround()) {
            jumpFrameIndex = (jumpFrameIndex + 1) % jumpFrames.length;
            setImage(jumpFrames[jumpFrameIndex]);
        } else if (Greenfoot.isKeyDown("d") || Greenfoot.isKeyDown("right")) {
            walkFrameIndex = (walkFrameIndex + 1) % walkFrames.length;
            setImage(walkFrames[walkFrameIndex]);
        } else if (Greenfoot.isKeyDown("a") || Greenfoot.isKeyDown("left")) {
            walkFrameIndex = (walkFrameIndex + 1) % walkFrames.length;
            GreenfootImage leftImage = new GreenfootImage(walkFrames[walkFrameIndex]);
            leftImage.mirrorHorizontally();
            setImage(leftImage);
        } else {
            idleFrameIndex = (idleFrameIndex + 1) % idleFrames.length;
            setImage(idleFrames[idleFrameIndex]);
        }
    }
    
    
    private void loadIdleAnimation() {
        idleFrames = new GreenfootImage[4];
        int frameWidth = 100; 
        int frameHeight = 64;
        GreenfootImage spritesheet = new GreenfootImage("Idle_KG_2.png");
        for (int i = 0; i < idleFrames.length; i++) {
            idleFrames[i] = new GreenfootImage(frameWidth, frameHeight);
            idleFrames[i].drawImage(spritesheet, -i * frameWidth, 0);
        }
    }

    private void loadWalkAnimation() {
        int frameCount = 7;
        walkFrames= new GreenfootImage[frameCount];
        int frameWidth = 100;
        int frameHeight = 64;
        GreenfootImage spritesheet = new GreenfootImage("Walking_KG_2.png");
        
        for (int i = 0; i < walkFrames.length; i++) {
            walkFrames[i] = new GreenfootImage(frameWidth, frameHeight);
            walkFrames[i].drawImage(spritesheet, -i * frameWidth, 0);
        }
    }
    
    private void loadJumpAnimation() {
        int frameCount = 6; // Spritesheet lompat punya 6 frame
        jumpFrames = new GreenfootImage[frameCount];
        int frameWidth = 100;  // Sesuaikan dengan ukuran frame Anda
        int frameHeight = 64; // Sesuaikan dengan ukuran frame Anda
        
        GreenfootImage spritesheet = new GreenfootImage("Jump_KG_2.png");
        
        for (int i = 0; i < jumpFrames.length; i++) {
            jumpFrames[i] = new GreenfootImage(frameWidth, frameHeight);
            jumpFrames[i].drawImage(spritesheet, -i * frameWidth, 0);
        }
    }
    
    private void loadAttackAnimation() {
        int frameCount = 6; // Spritesheet serangan punya 6 frame
        attackFrames = new GreenfootImage[frameCount];
        int frameWidth = 100;  // Sesuaikan dengan ukuran frame Anda
        int frameHeight = 64; // Sesuaikan dengan ukuran frame Anda
        
        GreenfootImage spritesheet = new GreenfootImage("Attack_KG_1.png");
        
        for (int i = 0; i < attackFrames.length; i++) {
            attackFrames[i] = new GreenfootImage(frameWidth, frameHeight);
            attackFrames[i].drawImage(spritesheet, -i * frameWidth, 0);
        }
    }
}
