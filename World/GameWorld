import greenfoot.*;
import java.util.ArrayList;

public abstract class GameWorld extends World {
    // Properti yang akan dimiliki semua stage
    protected int score;
    protected int lives;

    // Untuk menyimpan objek UI hati
    private ArrayList<UI_Hati> heartsUI = new ArrayList<UI_Hati>();

    // Musik latar belakang (global untuk semua stage)
    protected static GreenfootSound bgMusic = new GreenfootSound("about_theme.wav");

    // Constructor untuk memulai stage baru dari awal
    public GameWorld() {
        super(1024, 576, 1);
        this.score = 0;
        this.lives = 3;
        mulaiMusik();
    }

    // Constructor untuk melanjutkan ke stage berikutnya
    public GameWorld(int scoreSebelumnya, int livesSebelumnya) {
        super(1024, 576, 1);
        this.score = scoreSebelumnya;
        this.lives = livesSebelumnya;
        mulaiMusik();
    }

    // Menjalankan musik jika belum diputar
    private void mulaiMusik() {
        if (!bgMusic.isPlaying()) {
            bgMusic.playLoop();
        }
    }

    // Untuk menghentikan musik (misal saat ke Game Over atau pindah dunia)
    public static void stopMusic() {
        if (bgMusic != null && bgMusic.isPlaying()) {
            bgMusic.stop();
        }
    }

    // --- MANAJEMEN GAME STATE ---
    public void addScore(int points) {
        score += points;
        updateScoreDisplay();
    }

    public void playerDied() {
        lives--;
        updateLivesUI();
        if (lives > 0) {
            if (this instanceof Stage1_Desa) Greenfoot.setWorld(new Stage1_Desa(score, lives));
            else if (this instanceof Stage2_Arena) Greenfoot.setWorld(new Stage2_Arena(score, lives));
            else if (this instanceof Stage3_Perbatasan) Greenfoot.setWorld(new Stage3_Perbatasan(score, lives));
        } else {
            stopMusic(); // Stop musik saat Game Over
            Greenfoot.setWorld(new LayarGameOver(score));
        }
    }

    // --- UI ---
    protected void siapkanUI(String stageName) {
        showText(stageName, 93, 30);
        updateScoreDisplay();
        updateLivesUI();
    }

    private void updateScoreDisplay() {
        getBackground().setColor(new Color(66, 70, 77, 150));
        getBackground().fillRect(getWidth() - 200, 10, 180, 40);
        getBackground().setColor(Color.WHITE);
        getBackground().drawString("Skor: " + score, getWidth() - 150, 30);
    }

    private void updateLivesUI() {
        removeObjects(heartsUI);
        heartsUI.clear();

        for (int i = 0; i < lives; i++) {
            UI_Hati heart = new UI_Hati();
            addObject(heart, 40 + (i * 40), 70);
            heartsUI.add(heart);
        }
    }

    // --- GETTER ---
    public int getScore() { return score; }
    public int getLives() { return lives; }
}
